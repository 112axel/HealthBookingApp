@inject FeedbackService feedbackService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AccountService AccountService
@page "/feedback"
@using HealthCare.Domain.Enums
@using HealthCare.Domain.Models

<div class="container mt-5">
    <h3 class="mb-4">Leave Feedback</h3>

    <div class="mb-3">
        <label for="userFeedback" class="form-label">Your Feedback:</label>
        <input type="text" class="form-control" id="userFeedback" @bind="userFeedback" />
    </div>

    <div class="mb-3">
        <label for="selectedRating" class="form-label">Rate the Service:</label>
        <select class="form-select" id="selectedRating" @bind="selectedRating">
            @foreach (Rating rating in Enum.GetValues(typeof(Rating)))
            {
                <option value="@rating">@GetStarRating(rating)</option>
            }
        </select>
    </div>

    <button type="button" class="btn btn-primary" @onclick="SubmitFeedback">Submit Feedback</button>
</div>

<div class="container mt-5">
    <h3 class="feedback mb-4">All Feedback</h3>

    @foreach (var feedback in feedbackService.GetAllFeedback())
    {
        <div class="card mb-3">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        @if (feedback.Patient != null)
                        {
                            <p class="mb-0"><strong>@feedback.Patient.Account.FirstName @feedback.Patient.Account.LastName</strong></p>
                            <small class="text-muted">@feedback.Patient.Account.UserName</small>
                        }
                        else
                        {
                            <p class="mb-0"><strong>Anonymous</strong></p>
                        }
                    </div>
                    <div class="col-md-6">
                        <p class="mb-0">@feedback.Comment</p>
                        <p class="mb-0">Rating: @GetStarRating(feedback.Rating)</p>
                    </div>
                </div>
            </div>
        </div>
    }
</div>



@code {
    private Patient currentUser;
    private string userFeedback;
    private Rating selectedRating = Rating.Horible; // Default one star

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Retrieve data for the currently authenticated user
            currentUser = AccountService.GetAccountByName(user.Identity.Name).Patient;
        }
    }

    private void SubmitFeedback()
    {
        if (!string.IsNullOrWhiteSpace(userFeedback))
        {
            feedbackService.SaveFeedback(currentUser, userFeedback, selectedRating);
            // reset the input field
            userFeedback = string.Empty;
            selectedRating = Rating.Horible;
        }
    }

    // Helper method to convert numeric rating to stars
    private string GetStarRating(Rating rating)
    {
        // Each star corresponds to one numeric value
        int numberOfStars = (int)rating;
        return new string('⭐', numberOfStars);
    }
}
