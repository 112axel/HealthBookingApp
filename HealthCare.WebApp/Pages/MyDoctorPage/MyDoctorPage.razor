@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using HealthCare.Domain.Enums
@inject AccountService AccountService
@using HealthCare.Domain.Enums
@using HealthCare.Domain.Helpers
@using HealthCare.Domain.Models;
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AccountService AccoundService
@inject ScheduleService ScheduleService
@page "/doctor-dashboard"

<AuthorizeView Roles="Doctor">
    <Authorized>

        <div class="container mt-4">
            <h3>Hello, @currentUser.Account.FirstName @currentUser.Account.LastName!</h3>

            @if (currentUser != null)
            {
                <div class="card mt-4">
                    <div class="card-body">
                        <p><strong>User Information:</strong></p>
                        <div>
                            <p><strong>Name:</strong> @currentUser.Account.FirstName @currentUser.Account.LastName</p>
                            <p><strong>Age:</strong> @currentUser.Account.Age</p>
                            <p><strong>Email:</strong> @currentUser.Account.Email</p>
                            <p><strong>Phone number:</strong> @currentUser.Account.PhoneNumber</p>
                            <p><strong>Appointments:</strong> <NavLink href="/appointment">View Appointments</NavLink> </p>
                            <button class="btn btn-primary" @onclick="EditUser">Edit</button>
                        </div>
                    </div>
                </div>

                <div class="card mt-4">
                    <div class="card-body">
                        <h4>Set Your Availability:</h4>

                        <button disabled="@(!paginationHelper.IndexOffsetAllowed(-1))" @onclick="@(()=>ChangeShedule(-1))">Previous Week</button>
                        <button disabled="@(!paginationHelper.IndexOffsetAllowed(1))" @onclick="@(()=>ChangeShedule(1))">Next Week</button>

                        <div class="container mt-4">
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>Day</strong></p>
                                </div>
                                <div class="col-md-6">
                                    <p><strong>Available</strong></p>
                                </div>
                            </div>

                            @foreach (var day in Enumerable.Range(0, 7))
                            {
                                    var flagValue = (Days)Math.Pow(2, day);
                                <div class="row mb-2">
                                    <div class="col-md-6">
                                            @($"{flagValue} {selectedSchedule.WeekDate.AddDays(day).ToString("yyyy-MM-dd")}")
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" checked="@selectedSchedule.Days.HasFlag(flagValue)" @onchange="() => ToggleAvailability(flagValue)" />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-warning mt-4" role="alert">
                    <p>No user information found for the current doctor.</p>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container mt-4">
            <div class="alert alert-danger" role="alert">
                <p>You are not authorized to view this content.</p>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    private Staff currentUser;
    private PaginationHelper<Schedule> paginationHelper { get; set; }
    private Schedule selectedSchedule { get; set; } = new();

    private void ChangeShedule(int offset)
    {
        selectedSchedule = paginationHelper.ChangePage(offset);
    }


    private void ToggleAvailability(Days days)
    {
        // Save updated availability data to the database
        ScheduleService.ToggleDay(selectedSchedule, days);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Retrieve data for the currently authenticated doctor
            currentUser = AccoundService.GetAccountByName(user.Identity.Name).Staff;
            paginationHelper = new(ScheduleService.GetSchedules(currentUser));
            selectedSchedule = paginationHelper.GetCurrentPage();
        }
    }

    private void EditUser()
    {
        // Navigate to the edit page
        NavigationManager.NavigateTo("/edit-user", true);
    }
}

