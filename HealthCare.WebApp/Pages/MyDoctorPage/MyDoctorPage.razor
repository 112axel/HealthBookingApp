@*the DoctorPageService is added in program.cs *@
@using HealthCare.Domain.Enums
@using HealthCare.Domain.Helpers
@using HealthCare.Domain.Models;
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AccountService AccoundService
@inject ScheduleService ScheduleService
@page "/doctor-dashboard"

@page "/mydoctorpage"

<AuthorizeView Roles="Doctor">
    <Authorized>
        <h3>Hello, @context.User.Identity.Name!</h3>

        <button disabled="@(!paginationHelper.IndexOffsetAllowed(-1))" @onclick="@(()=>ChangeShedule(-1))">Previous Week</button>
        <button disabled="@(!paginationHelper.IndexOffsetAllowed(1))" @onclick="@(()=>ChangeShedule(1))">Next Week</button>
        @if (currentUser != null)
        {
            <div>
                <h4>@($"{currentUser.Account.FirstName} {currentUser.Account.LastName}")</h4>
                <p>Set Your Availability:</p>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Day</th>
                            <th>Available</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var day in Enumerable.Range(0, 7))
                        {
                            var flagValue = (Days)Math.Pow(2, day);
                            <tr>
                                <td>@($"{flagValue} {selectedSchedule.WeekDate.AddDays(day).ToString("yyyy-MM-dd")}")</td>
                                <td>
                                    <input type="checkbox" checked = "@selectedSchedule.Days.HasFlag(flagValue)" @onchange="() => ToggleAvailability(flagValue)" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p>No user information found for the current doctor.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this content.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private Staff currentUser;
    private PaginationHelper<Schedule> paginationHelper { get; set; }
    private Schedule selectedSchedule { get; set; } = new();

    private void ChangeShedule(int offset)
    {
        selectedSchedule = paginationHelper.ChangePage(offset);
    }


    private void ToggleAvailability(Days days)
    {
        // Save updated availability data to the database
        ScheduleService.ToggleDay(selectedSchedule, days);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Retrieve data for the currently authenticated doctor
            currentUser = AccoundService.GetAccountByName(user.Identity.Name).Staff;
            paginationHelper = new(ScheduleService.GetSchedules(currentUser));
            selectedSchedule = paginationHelper.GetCurrentPage();
        }
    }
}

