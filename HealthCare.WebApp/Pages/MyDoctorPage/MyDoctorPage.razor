@*the DoctorPageService is added in program.cs *@
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DoctorAvailabilityService AvailabilityService
@using HealthCare.Domain.Enums
@inject AccountService AccoundService
@using HealthCare.Domain.Models;
@using System.Security.Claims
@page "/doctor-dashboard"

@page "/mydoctorpage"

<AuthorizeView Roles="Doctor">
    <Authorized>
        <h3>Hello, @context.User.Identity.Name!</h3>

        @if (currentUser != null)
        {
            <div>
                <h4>@($"{currentUser.Account.FirstName} {currentUser.Account.LastName}")</h4>
                <p>Set Your Availability:</p>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Day</th>
                            <th>Available</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var days in Enumerable.Range(0, 7))
                        {
                        var flagValue = Math.Pow(2, days);
                            <tr>
                                <td>@((Days) flagValue)</td>
                                <td>
                                    <input type="checkbox" @onchange="() => ToggleAvailability((Days) flagValue)" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p>No user information found for the current doctor.</p>
        }
        <div class="container mt-4">
            <h3>Hello, @context.User.Identity.Name!</h3>

            @if (currentUser != null)
            {
                <div>
                    <h4>@($"{currentUser.Account.FirstName} {currentUser.Account.LastName}")</h4>
                    <p>Set Your Availability:</p>
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Day</th>
                                    <th>Available</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var dayOfWeek in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>())
                                {
                                    <tr>
                                        <td>@dayOfWeek</td>
                                        <td>
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" @(IsDayAvailable(dayOfWeek) ? "checked" : "" ) @onchange="() => ToggleAvailability(dayOfWeek)" />
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            else
            {
                <p class="text-danger">No user information found for the current doctor.</p>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this content.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private Staff currentUser;

    private void ToggleAvailability(Days days)
    {
        // Save updated availability data to the database
        AvailabilityService.SaveAvailability(currentUser.Id, days, false);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Retrieve data for the currently authenticated doctor
            currentUser = AccoundService.GetAccountByName(user.Identity.Name).Staff;
        }
    }
}

