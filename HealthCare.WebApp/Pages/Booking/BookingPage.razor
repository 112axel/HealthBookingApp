@using HealthCare.Domain.Helpers
@using HealthCare.Domain.Models
@using HealthCare.Domain.Enums
@using HealthCare.WebApp.Pages;
@using Microsoft.AspNetCore.Http;
@using System.Security.Claims

@inject BookingService BookingService
@inject AccountService AccountService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ScheduleService SheduleService

@page "/book-appointment"


<InputSelect @bind-Value="SelectedRole" @bind-Value:after="()=>{NewSelectedRole();}">
    @foreach (var role in Enum.GetValues(typeof(Role))){
        <option value="@role">
            @role
        </option>
    }
</InputSelect>

@if(SelectedRole != null)
{
    <InputSelect @bind-Value="SelectedDoctor" @bind-Value:after="()=> {NewSelectedDoctor();}">
        @foreach (var doctor in StaffOptions)
        {
            <option value="@doctor">
                @($"{doctor.Account.FirstName} {doctor.Account.LastName}")
            </option>
        }
    </InputSelect>
}
<div>
    <lable>What service do you recuire?:</lable>
    <input @bind="subject" />
</div>

<button disabled = "@(!paginationHelper.IndexOffsetAllowed(-1))" @onclick="@(()=>ChangeShedule(-1))">Previous Week</button>
<button disabled = "@(!paginationHelper.IndexOffsetAllowed(1))" @onclick="@(()=>ChangeShedule(1))">Next Week</button>

<div>

    @foreach(var day in availibleTimes ) {
        <div>
            <h2>@($"{day.Key.DayOfWeek.ToString()} {DateFormating(day.Key.Date)}")</h2>
            @foreach (var appointment in day.Value)
            {
                <button onclick="@(()=>{BookApointment(appointment);})">@TimeFormating(appointment.DateTime)</button>
            }
        </div>
    }

</div>
@code {

    private Dictionary<DateTime,List<Appointment>> availibleTimes = new();

    private Role? SelectedRole { get; set; }
    private Staff? SelectedDoctor { get; set; }
    private List<Staff> StaffOptions { get; set; } = new();
    private Patient currentUser;
    private string subject { get; set; }
    private Schedule selectedShedule { get; set; }

    private PaginationHelper<Schedule> paginationHelper { get; set; } 

    protected async override Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Retrieve data for the currently authenticated user
            //currentUser = UserService.GetPatientById(user.FindFirstValue(ClaimTypes.NameIdentifier));
            currentUser = AccountService.GetAccountByName(user.Identity.Name).Patient;
        }

        SelectedRole = Role.Distriktssköterska;
        NewSelectedRole();
    }

    private void ChangeShedule(int offset)
    {
        selectedShedule = paginationHelper.ChangePage(offset);
        availibleTimes = BookingService.AllApointmentsInWeek(SelectedDoctor, selectedShedule);
    }


    private void LoadAppointment(Staff staff, DateTime weekStart)
    {
        paginationHelper =new( SheduleService.GetSchedules(staff));
        selectedShedule = paginationHelper.GetCurrentPage();
        availibleTimes = BookingService.AllApointmentsInWeek(staff, selectedShedule);
    }

    private void NewSelectedRole()
    {
        StaffOptions = BookingService.GetStaff(SelectedRole);
        SelectedDoctor = StaffOptions.FirstOrDefault();
        NewSelectedDoctor();
        StateHasChanged();
    }

    private void NewSelectedDoctor()
    {
        LoadAppointment(SelectedDoctor,GetNextMonday());
    }

    private void BookApointment(Appointment apointment)
    {
        if(subject != null)
        {
            BookingService.BookApointment(SelectedDoctor, currentUser, apointment, subject);
            LoadAppointment(SelectedDoctor, GetNextMonday());
            StateHasChanged();
        }
    }

    private DateTime GetNextMonday()
    {
        DateTime today = DateTime.Today;
        // The (... + 7) % 7 ensures we end up with a value in the range [0, 6]
        int daysUntilMonday = ((int)DayOfWeek.Monday - (int)today.DayOfWeek + 7) % 7;
        DateTime nextMonday = today.AddDays(daysUntilMonday);

        return nextMonday;
    }

    private string TimeFormating(DateTime datetime)
    {
        return $"{datetime.Hour}:{datetime.Minute.ToString().PadLeft(2, '0')}";
    }

    private string DateFormating(DateTime dateTime)
    {
        return dateTime.ToString("yyyy-MM-dd");
    }

}
